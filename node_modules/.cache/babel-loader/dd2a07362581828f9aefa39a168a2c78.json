{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\exx\\\\eclipse-workspace-ee\\\\starlink\\\\src\\\\components\\\\WorldMap.js\";\nimport React, { Component } from 'react';\nimport { feature } from 'topojson-client';\nimport axios from 'axios';\nimport { geoPatterson } from 'd3-geo-projection';\nimport { geoGraticule, geoPath } from 'd3-geo';\nimport { select as d3Select } from 'd3-selection';\nimport { WORLD_MAP_URL } from \"../constant\";\nconst width = 1525;\nconst height = 825;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      map: null\n    };\n    this.refMap = React.createRef();\n  }\n\n  componentDidMount() {\n    axios.get(WORLD_MAP_URL).then(res => {\n      const {\n        data\n      } = res;\n      const land = feature(data, data.objects.countries).features;\n      this.generateMap(land);\n    }).catch(e => console.log('err in fecth world map data ', e));\n  }\n\n  generateMap(land) {\n    const projection = geoPatterson() //const projection = geoMercator() \n    .scale(230).translate([width / 2, height / 2 + 10]).precision(.01); //console.log(projection);\n\n    const graticule = geoGraticule();\n    const canvas = d3Select(this.refMap.current) // select current canvas\n    .attr(\"width\", width).attr(\"height\", height);\n    let context = canvas.node().getContext(\"2d\");\n    let path = geoPath().projection(projection).context(context);\n    context.fillStyle = \"#070f38\";\n    context.fillRect(0, 0, width, height); // draw the graticule\n    // ontext.strokeStyle = 'rgba(220, 220, 220, 1)';\n    // context.beginPath();\n    // path(graticule());\n    // context.lineWidth = 1;\n    // context.stroke();\n    // draw the graticule outline\n    //context.beginPath();\n    //context.lineWidth = 0.5;\n    //path(graticule.outline());\n    //context.stroke();\n\n    land.forEach(ele => {\n      // draw the countries (border and map itself)\n      context.fillStyle = '#362d54'; // map itself\n\n      context.strokeStyle = '#FFFFFF';\n      context.globalAlpha = 0.4;\n      context.beginPath();\n      path(ele);\n      path(land[0]);\n      context.fill();\n      context.stroke();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      className: \"map\",\n      ref: this.refMap,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default WorldMap;","map":{"version":3,"sources":["C:/Users/exx/eclipse-workspace-ee/starlink/src/components/WorldMap.js"],"names":["React","Component","feature","axios","geoPatterson","geoGraticule","geoPath","select","d3Select","WORLD_MAP_URL","width","height","WorldMap","constructor","state","map","refMap","createRef","componentDidMount","get","then","res","data","land","objects","countries","features","generateMap","catch","e","console","log","projection","scale","translate","precision","graticule","canvas","current","attr","context","node","getContext","path","fillStyle","fillRect","forEach","ele","strokeStyle","globalAlpha","beginPath","fill","stroke","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport { feature } from 'topojson-client';\r\nimport axios from 'axios';\r\nimport { geoPatterson } from 'd3-geo-projection';\r\nimport { geoGraticule, geoPath } from 'd3-geo';\r\nimport { select as d3Select } from 'd3-selection';\r\n\r\nimport { WORLD_MAP_URL } from \"../constant\";\r\n\r\nconst width = 1525;\r\nconst height = 825;\r\n\r\nclass WorldMap extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            map: null\r\n        }\r\n        this.refMap = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(WORLD_MAP_URL)\r\n            .then(res => {\r\n                const { data } = res;\r\n                const land = feature(data, data.objects.countries).features;\r\n                this.generateMap(land);\r\n            })\r\n            .catch(e => console.log('err in fecth world map data ', e))\r\n    }\r\n\r\n    generateMap(land){\r\n        const projection = geoPatterson()\r\n        //const projection = geoMercator() \r\n            .scale(230)\r\n            .translate([width / 2, height / 2+10])\r\n            .precision(.01);\r\n        \r\n        //console.log(projection);\r\n        const graticule = geoGraticule();\r\n\r\n        const canvas = d3Select(this.refMap.current) // select current canvas\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height)\r\n\r\n        let context = canvas.node().getContext(\"2d\");\r\n\r\n        let path = geoPath()\r\n            .projection(projection)\r\n            .context(context);\r\n        \r\n        context.fillStyle = \"#070f38\";\r\n        context.fillRect(0, 0, width, height);\r\n  \r\n        // draw the graticule\r\n        // ontext.strokeStyle = 'rgba(220, 220, 220, 1)';\r\n        // context.beginPath();\r\n        // path(graticule());\r\n        // context.lineWidth = 1;\r\n        // context.stroke();\r\n\r\n        // draw the graticule outline\r\n        //context.beginPath();\r\n        //context.lineWidth = 0.5;\r\n        //path(graticule.outline());\r\n        //context.stroke();\r\n\r\n        land.forEach(ele => {\r\n            // draw the countries (border and map itself)\r\n            context.fillStyle = '#362d54'; // map itself\r\n            context.strokeStyle = '#FFFFFF';\r\n            context.globalAlpha = 0.4;\r\n            context.beginPath();\r\n            path(ele);\r\n            path(land[0]);\r\n            context.fill();\r\n            context.stroke();\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"map-box\">\r\n                <canvas className=\"map\" ref={this.refMap} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WorldMap;"]},"metadata":{},"sourceType":"module"}