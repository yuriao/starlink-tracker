{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\exx\\\\eclipse-workspace-ee\\\\starlink\\\\src\\\\components\\\\Main.js\";\nimport React, { Component } from 'react';\nimport SatSetting from './SatSetting';\nimport SatelliteList from './SatelliteList';\nimport WorldMap from './WorldMap';\nimport { NEARBY_SATELLITE, STARLINK_CATEGORY, SAT_API_KEY, SATELLITE_POSITION_URL } from '../constant';\nimport Axios from 'axios';\nimport Footer from './Footer';\nimport * as d3Scale from 'd3-scale';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport { timeFormat as d3TimeFormat } from 'd3-time-format';\nconst width = 960;\nconst height = 600;\n\nclass Main extends Component {\n  constructor() {\n    super();\n\n    this.showNearbySatellite = setting => {\n      this.setState({\n        setting: setting\n      });\n      this.fetchSatellite(setting);\n    };\n\n    this.fetchSatellite = setting => {\n      const {\n        observerLat,\n        observerLong,\n        observerAlt,\n        observerRadius\n      } = setting; // destruction, ES6 feature\n\n      const url = `${NEARBY_SATELLITE}/${observerLat}/${observerLong}/${observerAlt}/${observerRadius}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n      this.setState({\n        loadingSatellites: true\n      });\n      Axios.get(url) // Axios is a library that handles Ajax response. it use promise object (ES6 feature) (then, catch)\n      .then(response => {\n        //Ajax: step stacks. as JS is single thread, the steps are put into a stack and Ajax call is put into deeper levels of stack, calls until conditions meet\n        this.setState({\n          satInfo: response.data,\n          loadingSatellites: false,\n          selected: [] // makesure after re-find the perviously selected is cleared \n\n        });\n      }).catch(error => {\n        console.log('err in fetch satellite -> ', error);\n        this.setState({\n          loadingSatellites: false\n        });\n      });\n    };\n\n    this.trackOnClick = duration => {\n      const {\n        observerLat,\n        observerLong,\n        observerAlt\n      } = this.state.setting;\n      const endTime = duration * 60; // convert min to sec\n\n      this.setState({\n        loadingSatPositions: true\n      });\n      const urls = this.state.selected.map(sat => {\n        const {\n          satid\n        } = sat;\n        const url = `${SATELLITE_POSITION_URL}/${satid}/${observerLat}/${observerLong}/${observerAlt}/${endTime}/&apiKey=${SAT_API_KEY}`;\n        return Axios.get(url);\n      });\n      Axios.all(urls) // use all to call multiple apis, one fail, to catch\n      .then(Axios.spread((...args) => {\n        return args.map(item => item.data);\n      })).then(res => {\n        this.setState({\n          satPositions: res,\n          loadingSatPositions: false\n        });\n      }).catch(e => {\n        console.log('err in fetch satellite position -> ', e.message);\n      }); //.finally(\n      //    () =>{\n      //      loadingSatPositions: false,\n      //})\n    };\n\n    this.addOrRemove = (item, status) => {\n      let {\n        selected: list\n      } = this.state; //equal to: let list = this.state.selected;\n\n      const found = list.some(entry => entry.satid === item.satid); // entry.satid and item.satid is passed by Satellite list\n\n      if (status && !found) {\n        //add\n        list.push(item);\n      }\n\n      if (!status && found) {\n        //remove\n        list = list.filter(entry => {\n          return entry.satid !== item.satid; //item.satid is the unchecked ones\n        });\n      }\n\n      console.log(list);\n      this.setState({\n        selected: list\n      });\n    };\n\n    this.track = () => {\n      const data = this.state.satPositions;\n      const len = data[0].positions.length;\n      const startTime = this.state.duration;\n      const canvas2 = d3Select(this.refTrack.current).attr(\"width\", width).attr(\"height\", height);\n      const context2 = canvas2.node().getContext(\"2d\");\n      let now = new Date();\n      let i = startTime;\n      let timer = setInterval(() => {\n        let timePassed = Date.now() - now;\n\n        if (i === startTime) {\n          now.setSeconds(now.getSeconds() + startTime * 60);\n        }\n\n        let time = new Date(now.getTime() + 60 * timePassed);\n        context2.clearRect(0, 0, width, height);\n        context2.font = \"bold 14px sans-serif\";\n        context2.fillStyle = \"#333\";\n        context2.textAlign = \"center\";\n        context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n        if (i >= len) {\n          clearInterval(timer);\n          this.setState({\n            isDrawing: false\n          });\n          const oHint = document.getElementsByClassName('hint')[0];\n          oHint.innerHTML = '';\n          return;\n        }\n\n        data.forEach(sat => {\n          const {\n            info,\n            positions\n          } = sat;\n          this.drawSat(info, positions[i], context2);\n        });\n        i += 60;\n      }, 1000);\n    };\n\n    this.drawSat = (sat, pos, context2) => {\n      const {\n        satlongitude,\n        satlatitude\n      } = pos;\n      if (!satlongitude || !satlatitude) return;\n      const {\n        satname\n      } = sat;\n      const nameWithNumber = satname.match(/\\d+/g).join('');\n      const projection = geoKavrayskiy7().scale(170).translate([width / 2, height / 2]).precision(.1);\n      const xy = projection([satlongitude, satlatitude]);\n      context2.fillStyle = d3Scale.scaleOrdinal(schemeCategory10)(nameWithNumber);\n      context2.beginPath();\n      context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n      context2.fill();\n      context2.font = \"bold 11px sans-serif\";\n      context2.textAlign = \"center\";\n      context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n    };\n\n    this.state = {\n      // maintain the data sent by satsetting button\n      loadingSatellites: false,\n      loadingSatPositions: false,\n      setting: undefined,\n      selected: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"left-side\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(SatSetting, {\n      onShow: this.showNearbySatellite,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(SatelliteList, {\n      satInfo: this.state.satInfo,\n      loading: this.state.loadingSatellites,\n      onSelectionChange: this.addOrRemove,\n      disableTrack: this.state.selected.length === 0,\n      trackOnclick: this.trackOnClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"right-side\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(WorldMap, {\n      refTrack: this.refTrack,\n      loading: this.state.loadingSatPositions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/exx/eclipse-workspace-ee/starlink/src/components/Main.js"],"names":["React","Component","SatSetting","SatelliteList","WorldMap","NEARBY_SATELLITE","STARLINK_CATEGORY","SAT_API_KEY","SATELLITE_POSITION_URL","Axios","Footer","d3Scale","schemeCategory10","timeFormat","d3TimeFormat","width","height","Main","constructor","showNearbySatellite","setting","setState","fetchSatellite","observerLat","observerLong","observerAlt","observerRadius","url","loadingSatellites","get","then","response","satInfo","data","selected","catch","error","console","log","trackOnClick","duration","state","endTime","loadingSatPositions","urls","map","sat","satid","all","spread","args","item","res","satPositions","e","message","addOrRemove","status","list","found","some","entry","push","filter","track","len","positions","length","startTime","canvas2","d3Select","refTrack","current","attr","context2","node","getContext","now","Date","i","timer","setInterval","timePassed","setSeconds","getSeconds","time","getTime","clearRect","font","fillStyle","textAlign","fillText","clearInterval","isDrawing","oHint","document","getElementsByClassName","innerHTML","forEach","info","drawSat","pos","satlongitude","satlatitude","satname","nameWithNumber","match","join","projection","geoKavrayskiy7","scale","translate","precision","xy","scaleOrdinal","beginPath","arc","Math","PI","fill","undefined","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport SatSetting from './SatSetting';\r\nimport SatelliteList from './SatelliteList';\r\nimport WorldMap from './WorldMap';\r\nimport { NEARBY_SATELLITE, STARLINK_CATEGORY, SAT_API_KEY, SATELLITE_POSITION_URL } from '../constant';\r\nimport Axios from 'axios';\r\nimport Footer from './Footer';\r\nimport * as d3Scale from 'd3-scale';\r\nimport { schemeCategory10  } from 'd3-scale-chromatic';\r\nimport { timeFormat as d3TimeFormat } from 'd3-time-format';\r\n\r\nconst width = 960;\r\nconst height = 600;\r\n\r\nclass Main extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = { // maintain the data sent by satsetting button\r\n            loadingSatellites: false,\r\n            loadingSatPositions: false,\r\n            setting: undefined,\r\n            selected: []\r\n        }\r\n    }\r\n\r\n    showNearbySatellite = (setting) => {\r\n        this.setState({\r\n            setting: setting,\r\n          })    \r\n        this.fetchSatellite(setting);\r\n    }\r\n\r\n    fetchSatellite = (setting) => {\r\n        const {observerLat, observerLong, observerAlt, observerRadius} = setting; // destruction, ES6 feature\r\n        const url = `${NEARBY_SATELLITE}/${observerLat}/${observerLong}/${observerAlt}/${observerRadius}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\r\n        this.setState({\r\n            loadingSatellites: true,\r\n        })\r\n        Axios.get(url) // Axios is a library that handles Ajax response. it use promise object (ES6 feature) (then, catch)\r\n            .then(response => {//Ajax: step stacks. as JS is single thread, the steps are put into a stack and Ajax call is put into deeper levels of stack, calls until conditions meet\r\n                this.setState({\r\n                    satInfo: response.data,\r\n                    loadingSatellites: false,\r\n                    selected:[] // makesure after re-find the perviously selected is cleared \r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log('err in fetch satellite -> ', error);\r\n                this.setState({\r\n                    loadingSatellites: false,\r\n                })\r\n            })\r\n    }\r\n  \r\n    trackOnClick = (duration) => {\r\n        const { observerLat, observerLong, observerAlt } = this.state.setting;\r\n        const endTime = duration * 60; // convert min to sec\r\n        this.setState({ loadingSatPositions: true });\r\n        const urls = this.state.selected.map( sat => {\r\n            const { satid } = sat;\r\n            const url = `${SATELLITE_POSITION_URL}/${satid}/${observerLat}/${observerLong}/${observerAlt}/${endTime}/&apiKey=${SAT_API_KEY}`;\r\n            return Axios.get(url);\r\n        });\r\n  \r\n        Axios.all(urls) // use all to call multiple apis, one fail, to catch\r\n          .then(\r\n            Axios.spread((...args) => {\r\n                return args.map(item => item.data);\r\n            })\r\n          )\r\n          .then( res => {\r\n              this.setState({\r\n                  satPositions: res,\r\n                  loadingSatPositions: false,\r\n              });\r\n          })\r\n          .catch( e => {\r\n              console.log('err in fetch satellite position -> ', e.message);\r\n          })\r\n          //.finally(\r\n          //    () =>{\r\n          //      loadingSatPositions: false,\r\n          //})\r\n  \r\n      }\r\n  \r\n    addOrRemove = (item, status) => {\r\n        let { selected: list } = this.state;//equal to: let list = this.state.selected;\r\n        const found = list.some( entry => entry.satid === item.satid); // entry.satid and item.satid is passed by Satellite list\r\n\r\n        if(status && !found){ //add\r\n            list.push(item)\r\n        }\r\n\r\n        if(!status && found){ //remove\r\n            list = list.filter( entry => {\r\n                return entry.satid !== item.satid;//item.satid is the unchecked ones\r\n            });\r\n        }\r\n        \r\n        console.log(list);\r\n        this.setState({\r\n            selected: list\r\n        }) \r\n    }\r\n\r\n    track = () => {\r\n        const data = this.state.satPositions;\r\n  \r\n        const len = data[0].positions.length;\r\n        const startTime = this.state.duration;\r\n  \r\n        const canvas2 = d3Select(this.refTrack.current)\r\n              .attr(\"width\", width)\r\n              .attr(\"height\", height);\r\n        const context2 = canvas2.node().getContext(\"2d\");\r\n  \r\n        let now = new Date();\r\n        let i = startTime;\r\n  \r\n        let timer = setInterval( () => {\r\n            let timePassed = Date.now() - now;\r\n            if(i === startTime) {\r\n                now.setSeconds(now.getSeconds() + startTime * 60)\r\n            }\r\n  \r\n            let time = new Date(now.getTime() + 60 * timePassed);\r\n            context2.clearRect(0, 0, width, height);\r\n            context2.font = \"bold 14px sans-serif\";\r\n            context2.fillStyle = \"#333\";\r\n            context2.textAlign = \"center\";\r\n            context2.fillText(d3TimeFormat(time), width / 2, 10);\r\n  \r\n            if(i >= len) {\r\n                clearInterval(timer);\r\n                this.setState({isDrawing: false});\r\n                const oHint = document.getElementsByClassName('hint')[0];\r\n                oHint.innerHTML = ''\r\n                return;\r\n            }\r\n            data.forEach( sat => {\r\n                const { info, positions } = sat;\r\n                this.drawSat(info, positions[i], context2)\r\n            });\r\n  \r\n            i += 60;\r\n        }, 1000)\r\n    }\r\n  \r\n    drawSat = (sat, pos, context2) => {\r\n        const { satlongitude, satlatitude } = pos;\r\n        if(!satlongitude || !satlatitude ) return;\r\n        const { satname } = sat;\r\n        const nameWithNumber = satname.match(/\\d+/g).join('');\r\n  \r\n        const projection = geoKavrayskiy7()\r\n              .scale(170)\r\n              .translate([width / 2, height / 2])\r\n              .precision(.1);\r\n  \r\n        const xy = projection([satlongitude, satlatitude]);\r\n        context2.fillStyle = d3Scale.scaleOrdinal(schemeCategory10)(nameWithNumber);\r\n        context2.beginPath();\r\n        context2.arc(xy[0], xy[1], 4, 0, 2*Math.PI);\r\n        context2.fill();\r\n        context2.font = \"bold 11px sans-serif\";\r\n        context2.textAlign = \"center\";\r\n        context2.fillText(nameWithNumber, xy[0], xy[1]+14);\r\n    }\r\n  \r\n\r\n    render() {\r\n        return (\r\n            <div className='main'>\r\n                <div className=\"left-side\">\r\n                    <SatSetting onShow={this.showNearbySatellite}/>\r\n                    <SatelliteList \r\n                        satInfo={this.state.satInfo}\r\n                        loading={this.state.loadingSatellites} \r\n                        onSelectionChange={this.addOrRemove}\r\n                        disableTrack={this.state.selected.length === 0}\r\n                        trackOnclick={this.trackOnClick}/>\r\n                    <Footer />\r\n                </div>\r\n                <div className=\"right-side\">\r\n                    <WorldMap\r\n                        refTrack={this.refTrack}\r\n                        loading={this.state.loadingSatPositions}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;"]},"metadata":{},"sourceType":"module"}