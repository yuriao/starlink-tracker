{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\exx\\\\eclipse-workspace-ee\\\\starlink\\\\src\\\\components\\\\Main.js\";\nimport React, { Component } from 'react';\nimport SatSetting from './SatSetting';\nimport SatelliteList from './SatelliteList';\nimport WorldMap from './WorldMap';\nimport { NEARBY_SATELLITE, STARLINK_CATEGORY, SAT_API_KEY, SATELLITE_POSITION_URL } from '../constant';\nimport Axios from 'axios';\nimport Footer from './Footer';\n\nclass Main extends Component {\n  constructor() {\n    super();\n\n    this.showNearbySatellite = setting => {\n      this.fetchSatellite(setting);\n    };\n\n    this.fetchSatellite = setting => {\n      const {\n        observerLat,\n        observerLong,\n        observerAlt,\n        observerRadius\n      } = setting; // destruction, ES6 feature\n\n      const url = `${NEARBY_SATELLITE}/${observerLat}/${observerLong}/${observerAlt}/${observerRadius}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n      this.setState({\n        loadingSatellites: true\n      });\n      Axios.get(url) // Axios is a library that handles Ajax response. it use promise object (ES6 feature) (then, catch)\n      .then(response => {\n        //Ajax: step stacks. as JS is single thread, the steps are put into a stack and Ajax call is put into deeper levels of stack, calls until conditions meet\n        this.setState({\n          satInfo: response.data,\n          loadingSatellites: false,\n          selected: [] // makesure after re-find the perviously selected is cleared \n\n        });\n      }).catch(error => {\n        console.log('err in fetch satellite -> ', error);\n        this.setState({\n          loadingSatellites: false\n        });\n      });\n    };\n\n    this.trackOnClick = duration => {\n      const {\n        observerLat,\n        observerLong,\n        observerAlt\n      } = this.state.setting;\n      const endTime = duration * 60; // convert min to sec\n\n      this.setState({\n        loadingSatPositions: true\n      });\n      const urls = this.state.selected.map(sat => {\n        const {\n          satid\n        } = sat;\n        const url = `${SATELLITE_POSITION_URL}/${satid}/${observerLat}/${observerLong}/${observerAlt}/${endTime}/&apiKey=${SAT_API_KEY}`;\n        return Axios.get(url);\n      });\n      Axios.all(urls) // use all to call multiple apis, one fail, to catch\n      .then(Axios.spread((...args) => {\n        return args.map(item => item.data);\n      })).then(res => {\n        this.setState({\n          satPositions: res,\n          loadingSatPositions: false\n        });\n      }).catch(e => {\n        console.log('err in fetch satellite position -> ', e.message);\n      }); //.finally(\n      //    () =>{\n      //      loadingSatPositions: false,\n      //})\n    };\n\n    this.addOrRemove = (item, status) => {\n      let {\n        selected: list\n      } = this.state; //equal to: let list = this.state.selected;\n\n      const found = list.some(entry => entry.satid === item.satid); // entry.satid and item.satid is passed by Satellite list\n\n      if (status && !found) {\n        //add\n        list.push(item);\n      }\n\n      if (!status && found) {\n        //remove\n        list = list.filter(entry => {\n          return entry.satid !== item.satid; //item.satid is the unchecked ones\n        });\n      }\n\n      console.log(list);\n      this.setState({\n        selected: list\n      });\n    };\n\n    this.state = {\n      // maintain the data sent by satsetting button\n      loadingSatellites: false,\n      loadingSatPositions: false,\n      setting: undefined,\n      selected: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"left-side\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(SatSetting, {\n      onShow: this.showNearbySatellite,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(SatelliteList, {\n      satInfo: this.state.satInfo,\n      loading: this.state.loadingSatellites,\n      onSelectionChange: this.addOrRemove,\n      disableTrack: this.state.selected.length === 0,\n      trackOnclick: this.trackOnClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"right-side\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(WorldMap, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/exx/eclipse-workspace-ee/starlink/src/components/Main.js"],"names":["React","Component","SatSetting","SatelliteList","WorldMap","NEARBY_SATELLITE","STARLINK_CATEGORY","SAT_API_KEY","SATELLITE_POSITION_URL","Axios","Footer","Main","constructor","showNearbySatellite","setting","fetchSatellite","observerLat","observerLong","observerAlt","observerRadius","url","setState","loadingSatellites","get","then","response","satInfo","data","selected","catch","error","console","log","trackOnClick","duration","state","endTime","loadingSatPositions","urls","map","sat","satid","all","spread","args","item","res","satPositions","e","message","addOrRemove","status","list","found","some","entry","push","filter","undefined","render","length"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport SatSetting from './SatSetting';\r\nimport SatelliteList from './SatelliteList';\r\nimport WorldMap from './WorldMap';\r\nimport { NEARBY_SATELLITE, STARLINK_CATEGORY, SAT_API_KEY, SATELLITE_POSITION_URL } from '../constant';\r\nimport Axios from 'axios';\r\nimport Footer from './Footer';\r\n\r\nclass Main extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = { // maintain the data sent by satsetting button\r\n            loadingSatellites: false,\r\n            loadingSatPositions: false,\r\n            setting: undefined,\r\n            selected: []\r\n        }\r\n    }\r\n\r\n    showNearbySatellite = (setting) => {\r\n        this.fetchSatellite(setting);\r\n    }\r\n\r\n    fetchSatellite = (setting) => {\r\n        const {observerLat, observerLong, observerAlt, observerRadius} = setting; // destruction, ES6 feature\r\n        const url = `${NEARBY_SATELLITE}/${observerLat}/${observerLong}/${observerAlt}/${observerRadius}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\r\n        this.setState({\r\n            loadingSatellites: true,\r\n        })\r\n        Axios.get(url) // Axios is a library that handles Ajax response. it use promise object (ES6 feature) (then, catch)\r\n            .then(response => {//Ajax: step stacks. as JS is single thread, the steps are put into a stack and Ajax call is put into deeper levels of stack, calls until conditions meet\r\n                this.setState({\r\n                    satInfo: response.data,\r\n                    loadingSatellites: false,\r\n                    selected:[] // makesure after re-find the perviously selected is cleared \r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log('err in fetch satellite -> ', error);\r\n                this.setState({\r\n                    loadingSatellites: false,\r\n                })\r\n            })\r\n    }\r\n  \r\n    trackOnClick = (duration) => {\r\n        const { observerLat, observerLong, observerAlt } = this.state.setting;\r\n        const endTime = duration * 60; // convert min to sec\r\n        this.setState({ loadingSatPositions: true });\r\n        const urls = this.state.selected.map( sat => {\r\n            const { satid } = sat;\r\n            const url = `${SATELLITE_POSITION_URL}/${satid}/${observerLat}/${observerLong}/${observerAlt}/${endTime}/&apiKey=${SAT_API_KEY}`;\r\n            return Axios.get(url);\r\n        });\r\n  \r\n        Axios.all(urls) // use all to call multiple apis, one fail, to catch\r\n          .then(\r\n            Axios.spread((...args) => {\r\n                return args.map(item => item.data);\r\n            })\r\n          )\r\n          .then( res => {\r\n              this.setState({\r\n                  satPositions: res,\r\n                  loadingSatPositions: false,\r\n              });\r\n          })\r\n          .catch( e => {\r\n              console.log('err in fetch satellite position -> ', e.message);\r\n          })\r\n          //.finally(\r\n          //    () =>{\r\n          //      loadingSatPositions: false,\r\n          //})\r\n  \r\n      }\r\n  \r\n    addOrRemove = (item, status) => {\r\n        let { selected: list } = this.state;//equal to: let list = this.state.selected;\r\n        const found = list.some( entry => entry.satid === item.satid); // entry.satid and item.satid is passed by Satellite list\r\n\r\n        if(status && !found){ //add\r\n            list.push(item)\r\n        }\r\n\r\n        if(!status && found){ //remove\r\n            list = list.filter( entry => {\r\n                return entry.satid !== item.satid;//item.satid is the unchecked ones\r\n            });\r\n        }\r\n        \r\n        console.log(list);\r\n        this.setState({\r\n            selected: list\r\n        }) \r\n    }\r\n\r\n  \r\n\r\n    render() {\r\n        return (\r\n            <div className='main'>\r\n                <div className=\"left-side\">\r\n                    <SatSetting onShow={this.showNearbySatellite}/>\r\n                    <SatelliteList \r\n                        satInfo={this.state.satInfo}\r\n                        loading={this.state.loadingSatellites} \r\n                        onSelectionChange={this.addOrRemove}\r\n                        disableTrack={this.state.selected.length === 0}\r\n                        trackOnclick={this.trackOnClick}/>\r\n                    <Footer />\r\n                </div>\r\n                <div className=\"right-side\">\r\n                    <WorldMap/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;"]},"metadata":{},"sourceType":"module"}